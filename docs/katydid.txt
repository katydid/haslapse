-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A haskell implementation of Katydid
--   
--   A haskell implementation of Katydid
--   
--   This includes:
--   
--   <ul>
--   <li>Relapse, a validation Language</li>
--   <li>Parsers for JSON, XML and an abstraction for trees</li>
--   </ul>
@package katydid
@version 0.1.0.0

module Relapse

module Parsers
class Tree a
getLabel :: Tree a => a -> Label
getChildren :: Tree a => a -> [a]
data Label
String :: String -> Label
Number :: Rational -> Label
Bool :: Bool -> Label
instance GHC.Classes.Ord Parsers.Label
instance GHC.Classes.Eq Parsers.Label
instance GHC.Show.Show Parsers.Label

module Json
decodeJSON :: String -> Either String [JsonTree]
type JsonTree = Tree Label
instance Parsers.Tree Json.JsonTree

module Xml
decodeXML :: String -> [XmlTree]
instance Parsers.Tree Text.XML.HXT.DOM.TypeDefs.XmlTree

module Values
data BoolExpr
BoolConst :: Bool -> BoolExpr
BoolVariable :: BoolExpr
OrFunc :: BoolExpr -> BoolExpr -> BoolExpr
AndFunc :: BoolExpr -> BoolExpr -> BoolExpr
NotFunc :: BoolExpr -> BoolExpr
BoolEqualFunc :: BoolExpr -> BoolExpr -> BoolExpr
DoubleEqualFunc :: DoubleExpr -> DoubleExpr -> BoolExpr
IntEqualFunc :: IntExpr -> IntExpr -> BoolExpr
UintEqualFunc :: UintExpr -> UintExpr -> BoolExpr
StringEqualFunc :: StringExpr -> StringExpr -> BoolExpr
BytesEqualFunc :: BytesExpr -> BytesExpr -> BoolExpr
IntListContainsFunc :: IntExpr -> [IntExpr] -> BoolExpr
StringListContainsFunc :: StringExpr -> [StringExpr] -> BoolExpr
UintListContainsFunc :: UintExpr -> [UintExpr] -> BoolExpr
StringContainsFunc :: StringExpr -> StringExpr -> BoolExpr
BoolListElemFunc :: [BoolExpr] -> IntExpr -> BoolExpr
BytesGreaterOrEqualFunc :: BytesExpr -> BytesExpr -> BoolExpr
DoubleGreaterOrEqualFunc :: DoubleExpr -> DoubleExpr -> BoolExpr
IntGreaterOrEqualFunc :: IntExpr -> IntExpr -> BoolExpr
UintGreaterOrEqualFunc :: UintExpr -> UintExpr -> BoolExpr
BytesGreaterThanFunc :: BytesExpr -> BytesExpr -> BoolExpr
DoubleGreaterThanFunc :: DoubleExpr -> DoubleExpr -> BoolExpr
IntGreaterThanFunc :: IntExpr -> IntExpr -> BoolExpr
UintGreaterThanFunc :: UintExpr -> UintExpr -> BoolExpr
StringHasPrefixFunc :: StringExpr -> StringExpr -> BoolExpr
StringHasSuffixFunc :: StringExpr -> StringExpr -> BoolExpr
BytesLessOrEqualFunc :: BytesExpr -> BytesExpr -> BoolExpr
DoubleLessOrEqualFunc :: DoubleExpr -> DoubleExpr -> BoolExpr
IntLessOrEqualFunc :: IntExpr -> IntExpr -> BoolExpr
UintLessOrEqualFunc :: UintExpr -> UintExpr -> BoolExpr
BytesLessThanFunc :: BytesExpr -> BytesExpr -> BoolExpr
DoubleLessThanFunc :: DoubleExpr -> DoubleExpr -> BoolExpr
IntLessThanFunc :: IntExpr -> IntExpr -> BoolExpr
UintLessThanFunc :: UintExpr -> UintExpr -> BoolExpr
BytesNotEqualFunc :: BytesExpr -> BytesExpr -> BoolExpr
BoolNotEqualFunc :: BoolExpr -> BoolExpr -> BoolExpr
DoubleNotEqualFunc :: DoubleExpr -> DoubleExpr -> BoolExpr
IntNotEqualFunc :: IntExpr -> IntExpr -> BoolExpr
StringNotEqualFunc :: StringExpr -> StringExpr -> BoolExpr
UintNotEqualFunc :: UintExpr -> UintExpr -> BoolExpr
BytesTypeFunc :: BytesExpr -> BoolExpr
BoolTypeFunc :: BoolExpr -> BoolExpr
DoubleTypeFunc :: DoubleExpr -> BoolExpr
IntTypeFunc :: IntExpr -> BoolExpr
UintTypeFunc :: UintExpr -> BoolExpr
StringTypeFunc :: StringExpr -> BoolExpr
RegexFunc :: StringExpr -> StringExpr -> BoolExpr
data DoubleExpr
DoubleConst :: Double -> DoubleExpr
DoubleVariable :: DoubleExpr
DoubleListElemFunc :: [DoubleExpr] -> IntExpr -> DoubleExpr
data IntExpr
IntConst :: Int -> IntExpr
IntVariable :: IntExpr
IntListElemFunc :: [IntExpr] -> IntExpr -> IntExpr
BytesListLengthFunc :: [BytesExpr] -> IntExpr
BoolListLengthFunc :: [BoolExpr] -> IntExpr
BytesLengthFunc :: BytesExpr -> IntExpr
DoubleListLengthFunc :: [DoubleExpr] -> IntExpr
IntListLengthFunc :: [IntExpr] -> IntExpr
StringListLengthFunc :: [StringExpr] -> IntExpr
UintListLengthFunc :: [UintExpr] -> IntExpr
StringLengthFunc :: StringExpr -> IntExpr
data StringExpr
StringConst :: String -> StringExpr
StringVariable :: StringExpr
StringListElemFunc :: [StringExpr] -> IntExpr -> StringExpr
StringToLowerFunc :: StringExpr -> StringExpr
StringToUpperFunc :: StringExpr -> StringExpr
data UintExpr
UintConst :: Int -> UintExpr
UintVariable :: UintExpr
UintListElemFunc :: [UintExpr] -> IntExpr -> UintExpr
data BytesExpr
BytesConst :: String -> BytesExpr
BytesVariable :: BytesExpr
BytesListElemFunc :: [BytesExpr] -> IntExpr -> BytesExpr
simplifyBoolExpr :: BoolExpr -> BoolExpr
data ValueErr
eval :: BoolExpr -> Label -> Except ValueErr Bool
instance GHC.Show.Show Values.ValueErr
instance GHC.Classes.Ord Values.ValueErr
instance GHC.Classes.Eq Values.ValueErr
instance GHC.Show.Show Values.BoolExpr
instance GHC.Classes.Ord Values.BoolExpr
instance GHC.Classes.Eq Values.BoolExpr
instance GHC.Show.Show Values.DoubleExpr
instance GHC.Classes.Ord Values.DoubleExpr
instance GHC.Classes.Eq Values.DoubleExpr
instance GHC.Show.Show Values.UintExpr
instance GHC.Classes.Ord Values.UintExpr
instance GHC.Classes.Eq Values.UintExpr
instance GHC.Show.Show Values.StringExpr
instance GHC.Classes.Ord Values.StringExpr
instance GHC.Classes.Eq Values.StringExpr
instance GHC.Show.Show Values.IntExpr
instance GHC.Classes.Ord Values.IntExpr
instance GHC.Classes.Eq Values.IntExpr
instance GHC.Show.Show Values.BytesExpr
instance GHC.Classes.Ord Values.BytesExpr
instance GHC.Classes.Eq Values.BytesExpr

module Patterns
data Pattern
Empty :: Pattern
ZAny :: Pattern
Node :: BoolExpr -> Pattern -> Pattern
Or :: Pattern -> Pattern -> Pattern
And :: Pattern -> Pattern -> Pattern
Not :: Pattern -> Pattern
Concat :: Pattern -> Pattern -> Pattern
Interleave :: Pattern -> Pattern -> Pattern
ZeroOrMore :: Pattern -> Pattern
Optional :: Pattern -> Pattern
Contains :: Pattern -> Pattern
Reference :: String -> Pattern
data Refs
emptyRef :: Refs
union :: Refs -> Refs -> Refs
newRef :: String -> Pattern -> Refs
reverseLookupRef :: Pattern -> Refs -> Maybe String
lookupRef :: Refs -> String -> Pattern
hasRecursion :: Refs -> Bool
nullable :: Refs -> Pattern -> Bool
unescapable :: Pattern -> Bool
instance GHC.Classes.Eq Patterns.Refs
instance GHC.Show.Show Patterns.Refs
instance GHC.Show.Show Patterns.Pattern
instance GHC.Classes.Ord Patterns.Pattern
instance GHC.Classes.Eq Patterns.Pattern

module ParsePatterns
data Expr
BoolExpr :: BoolExpr -> Expr
DoubleExpr :: DoubleExpr -> Expr
IntExpr :: IntExpr -> Expr
UintExpr :: UintExpr -> Expr
StringExpr :: StringExpr -> Expr
BytesExpr :: BytesExpr -> Expr
BoolListExpr :: [BoolExpr] -> Expr
DoubleListExpr :: [DoubleExpr] -> Expr
IntListExpr :: [IntExpr] -> Expr
UintListExpr :: [UintExpr] -> Expr
StringListExpr :: [StringExpr] -> Expr
BytesListExpr :: [BytesExpr] -> Expr
newBuiltIn :: String -> Expr -> Either String Expr
newFunction :: String -> [Expr] -> Either String Expr
fromJson :: String -> Either String Refs
instance GHC.Show.Show ParsePatterns.Expr

module Zip
type Zipper = [Int]
zippy :: [Pattern] -> ([Pattern], Zipper)
unzipby :: Zipper -> [Bool] -> [Bool]

module Simplify
simplify :: Refs -> Pattern -> Pattern

module IfExprs
data IfExprs
type IfExpr = (BoolExpr, Pattern, Pattern)
evalIfExprs :: IfExprs -> Label -> Except ValueErr [Pattern]
compileIfExprs :: Refs -> [IfExpr] -> IfExprs
data ZippedIfExprs
zipIfExprs :: IfExprs -> ZippedIfExprs
evalZippedIfExprs :: ZippedIfExprs -> Label -> Except ValueErr ([Pattern], Zipper)

module Deriv
derivs :: Tree t => Refs -> [t] -> Except String Pattern
derivCalls :: Refs -> [Pattern] -> IfExprs
derivReturns :: Refs -> ([Pattern], [Bool]) -> [Pattern]
zipderivs :: Tree t => Refs -> [t] -> Except String Pattern

module MapDeriv
mderivs :: Tree t => Refs -> [t] -> Except String Pattern

module VpaDeriv
vderivs :: Tree t => Refs -> [t] -> Except String Pattern

module Parser
parseGrammar :: String -> Either ParseError Refs
grammar :: CharParser () Refs
pattern :: CharParser () Pattern
nameExpr :: CharParser () BoolExpr
expr :: CharParser () BoolExpr
idLit :: CharParser () String
bytesCastLit :: CharParser () String
stringLit :: CharParser () String
doubleCastLit :: CharParser () Double
uintCastLit :: CharParser () Int
intLit :: CharParser () Int
ws :: CharParser () ()
