-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A haskell implementation of Katydid
--   
--   A haskell implementation of Katydid
--   
--   This includes:
--   
--   <ul>
--   <li>Relapse, a validation Language</li>
--   <li>Parsers for JSON, XML and an abstraction for trees</li>
--   </ul>
--   
--   You should only need the following modules:
--   
--   <ul>
--   <li>The Relapse module is used for validation.</li>
--   <li>The Json and XML modules are used to create Json and XML trees
--   that can be validated.</li>
--   </ul>
--   
--   If you want to implement your own parser then you can look at the
--   Parsers module
@package katydid
@version 0.1.0.0

module Relapse


-- | This module describes the abstract tree that can be validated by
--   Relapse.
--   
--   The JSON and XML parsers both are both versions of this type class.
module Parsers
class Tree a
getLabel :: Tree a => a -> Label
getChildren :: Tree a => a -> [a]
data Label
String :: String -> Label
Number :: Rational -> Label
Bool :: Bool -> Label
instance GHC.Classes.Ord Parsers.Label
instance GHC.Classes.Eq Parsers.Label
instance GHC.Show.Show Parsers.Label


-- | This module contains the Json Parser.
module Json

-- | decodeJSON returns a JsonTree, given an input string.
decodeJSON :: String -> Either String [JsonTree]

-- | JsonTree is a tree that can be validated by Relapse.
type JsonTree = Tree Label
instance Parsers.Tree Json.JsonTree


-- | This module contains the XML Parser.
module Xml

-- | decodeXML returns a XmlTree, given an input string.
decodeXML :: String -> [XmlTree]
instance Parsers.Tree Text.XML.HXT.DOM.TypeDefs.XmlTree


-- | This module contains all the Relapse expressions.
--   
--   It also contains an eval function and a simplfication function for
--   these expressions.
module Expr
data BoolExpr
BoolConst :: Bool -> BoolExpr
BoolVariable :: BoolExpr
OrFunc :: BoolExpr -> BoolExpr -> BoolExpr
AndFunc :: BoolExpr -> BoolExpr -> BoolExpr
NotFunc :: BoolExpr -> BoolExpr
BoolEqualFunc :: BoolExpr -> BoolExpr -> BoolExpr
DoubleEqualFunc :: DoubleExpr -> DoubleExpr -> BoolExpr
IntEqualFunc :: IntExpr -> IntExpr -> BoolExpr
UintEqualFunc :: UintExpr -> UintExpr -> BoolExpr
StringEqualFunc :: StringExpr -> StringExpr -> BoolExpr
BytesEqualFunc :: BytesExpr -> BytesExpr -> BoolExpr
IntListContainsFunc :: IntExpr -> [IntExpr] -> BoolExpr
StringListContainsFunc :: StringExpr -> [StringExpr] -> BoolExpr
UintListContainsFunc :: UintExpr -> [UintExpr] -> BoolExpr
StringContainsFunc :: StringExpr -> StringExpr -> BoolExpr
BoolListElemFunc :: [BoolExpr] -> IntExpr -> BoolExpr
BytesGreaterOrEqualFunc :: BytesExpr -> BytesExpr -> BoolExpr
DoubleGreaterOrEqualFunc :: DoubleExpr -> DoubleExpr -> BoolExpr
IntGreaterOrEqualFunc :: IntExpr -> IntExpr -> BoolExpr
UintGreaterOrEqualFunc :: UintExpr -> UintExpr -> BoolExpr
BytesGreaterThanFunc :: BytesExpr -> BytesExpr -> BoolExpr
DoubleGreaterThanFunc :: DoubleExpr -> DoubleExpr -> BoolExpr
IntGreaterThanFunc :: IntExpr -> IntExpr -> BoolExpr
UintGreaterThanFunc :: UintExpr -> UintExpr -> BoolExpr
StringHasPrefixFunc :: StringExpr -> StringExpr -> BoolExpr
StringHasSuffixFunc :: StringExpr -> StringExpr -> BoolExpr
BytesLessOrEqualFunc :: BytesExpr -> BytesExpr -> BoolExpr
DoubleLessOrEqualFunc :: DoubleExpr -> DoubleExpr -> BoolExpr
IntLessOrEqualFunc :: IntExpr -> IntExpr -> BoolExpr
UintLessOrEqualFunc :: UintExpr -> UintExpr -> BoolExpr
BytesLessThanFunc :: BytesExpr -> BytesExpr -> BoolExpr
DoubleLessThanFunc :: DoubleExpr -> DoubleExpr -> BoolExpr
IntLessThanFunc :: IntExpr -> IntExpr -> BoolExpr
UintLessThanFunc :: UintExpr -> UintExpr -> BoolExpr
BytesNotEqualFunc :: BytesExpr -> BytesExpr -> BoolExpr
BoolNotEqualFunc :: BoolExpr -> BoolExpr -> BoolExpr
DoubleNotEqualFunc :: DoubleExpr -> DoubleExpr -> BoolExpr
IntNotEqualFunc :: IntExpr -> IntExpr -> BoolExpr
StringNotEqualFunc :: StringExpr -> StringExpr -> BoolExpr
UintNotEqualFunc :: UintExpr -> UintExpr -> BoolExpr
BytesTypeFunc :: BytesExpr -> BoolExpr
BoolTypeFunc :: BoolExpr -> BoolExpr
DoubleTypeFunc :: DoubleExpr -> BoolExpr
IntTypeFunc :: IntExpr -> BoolExpr
UintTypeFunc :: UintExpr -> BoolExpr
StringTypeFunc :: StringExpr -> BoolExpr
RegexFunc :: StringExpr -> StringExpr -> BoolExpr
data DoubleExpr
DoubleConst :: Double -> DoubleExpr
DoubleVariable :: DoubleExpr
DoubleListElemFunc :: [DoubleExpr] -> IntExpr -> DoubleExpr
data IntExpr
IntConst :: Int -> IntExpr
IntVariable :: IntExpr
IntListElemFunc :: [IntExpr] -> IntExpr -> IntExpr
BytesListLengthFunc :: [BytesExpr] -> IntExpr
BoolListLengthFunc :: [BoolExpr] -> IntExpr
BytesLengthFunc :: BytesExpr -> IntExpr
DoubleListLengthFunc :: [DoubleExpr] -> IntExpr
IntListLengthFunc :: [IntExpr] -> IntExpr
StringListLengthFunc :: [StringExpr] -> IntExpr
UintListLengthFunc :: [UintExpr] -> IntExpr
StringLengthFunc :: StringExpr -> IntExpr
data StringExpr
StringConst :: String -> StringExpr
StringVariable :: StringExpr
StringListElemFunc :: [StringExpr] -> IntExpr -> StringExpr
StringToLowerFunc :: StringExpr -> StringExpr
StringToUpperFunc :: StringExpr -> StringExpr
data UintExpr
UintConst :: Int -> UintExpr
UintVariable :: UintExpr
UintListElemFunc :: [UintExpr] -> IntExpr -> UintExpr
data BytesExpr
BytesConst :: String -> BytesExpr
BytesVariable :: BytesExpr
BytesListElemFunc :: [BytesExpr] -> IntExpr -> BytesExpr

-- | simplifyBoolExpr returns an equivalent, but simpler version of the
--   input boolean expression.
simplifyBoolExpr :: BoolExpr -> BoolExpr

-- | eval evaluates a boolean expression, given an input label.
eval :: BoolExpr -> Label -> Except ValueErr Bool
data ValueErr
instance GHC.Show.Show Expr.ValueErr
instance GHC.Classes.Ord Expr.ValueErr
instance GHC.Classes.Eq Expr.ValueErr
instance GHC.Show.Show Expr.BoolExpr
instance GHC.Classes.Ord Expr.BoolExpr
instance GHC.Classes.Eq Expr.BoolExpr
instance GHC.Show.Show Expr.DoubleExpr
instance GHC.Classes.Ord Expr.DoubleExpr
instance GHC.Classes.Eq Expr.DoubleExpr
instance GHC.Show.Show Expr.UintExpr
instance GHC.Classes.Ord Expr.UintExpr
instance GHC.Classes.Eq Expr.UintExpr
instance GHC.Show.Show Expr.StringExpr
instance GHC.Classes.Ord Expr.StringExpr
instance GHC.Classes.Eq Expr.StringExpr
instance GHC.Show.Show Expr.IntExpr
instance GHC.Classes.Ord Expr.IntExpr
instance GHC.Classes.Eq Expr.IntExpr
instance GHC.Show.Show Expr.BytesExpr
instance GHC.Classes.Ord Expr.BytesExpr
instance GHC.Classes.Eq Expr.BytesExpr


-- | This module describes the patterns supported by Relapse.
--   
--   It also contains some simple functions for the map of references that
--   a Relapse grammar consists of.
--   
--   Finally it also contains some very simple pattern functions.
module Patterns

-- | Pattern recursively describes a Relapse Pattern.
data Pattern
Empty :: Pattern
ZAny :: Pattern
Node :: BoolExpr -> Pattern -> Pattern
Or :: Pattern -> Pattern -> Pattern
And :: Pattern -> Pattern -> Pattern
Not :: Pattern -> Pattern
Concat :: Pattern -> Pattern -> Pattern
Interleave :: Pattern -> Pattern -> Pattern
ZeroOrMore :: Pattern -> Pattern
Optional :: Pattern -> Pattern
Contains :: Pattern -> Pattern
Reference :: String -> Pattern

-- | Refs is a map from reference name to pattern and describes a relapse
--   grammar.
data Refs

-- | emptyRef returns an empty reference map.
emptyRef :: Refs

-- | union returns the union of two reference maps.
union :: Refs -> Refs -> Refs

-- | newRef returns a new reference map given a single pattern and its
--   reference name.
newRef :: String -> Pattern -> Refs

-- | reverseLookupRef returns the reference name for a given pattern.
reverseLookupRef :: Pattern -> Refs -> Maybe String

-- | lookupRef looks up a pattern in the reference map, given a reference
--   name.
lookupRef :: Refs -> String -> Pattern

-- | hasRecursion returns whether an relapse grammar has any recursion,
--   starting from the "main" reference.
hasRecursion :: Refs -> Bool

-- | The nullable function returns whether a pattern is nullable. This
--   means that the pattern matches the empty string.
nullable :: Refs -> Pattern -> Bool

-- | unescapable is used for short circuiting. A part of the tree can be
--   skipped if all patterns are unescapable.
unescapable :: Pattern -> Bool
instance GHC.Classes.Eq Patterns.Refs
instance GHC.Show.Show Patterns.Refs
instance GHC.Show.Show Patterns.Pattern
instance GHC.Classes.Ord Patterns.Pattern
instance GHC.Classes.Eq Patterns.Pattern


-- | This is an internal relapse module.
--   
--   It contains relapse grammar parsing helper functions and
--   
--   it also contains a parser for the JSON serialized relapse AST.
module ParsePatterns
data Expr
BoolExpr :: BoolExpr -> Expr
DoubleExpr :: DoubleExpr -> Expr
IntExpr :: IntExpr -> Expr
UintExpr :: UintExpr -> Expr
StringExpr :: StringExpr -> Expr
BytesExpr :: BytesExpr -> Expr
BoolListExpr :: [BoolExpr] -> Expr
DoubleListExpr :: [DoubleExpr] -> Expr
IntListExpr :: [IntExpr] -> Expr
UintListExpr :: [UintExpr] -> Expr
StringListExpr :: [StringExpr] -> Expr
BytesListExpr :: [BytesExpr] -> Expr

-- | newBuiltIn parsers a builtin function to a relapse expression.
newBuiltIn :: String -> Expr -> Either String Expr

-- | newFunction parsers a relapse function to a relapse expression.
newFunction :: String -> [Expr] -> Either String Expr

-- | fromJson parses the relapse AST that has been serialized to JSON.
fromJson :: String -> Either String Refs
instance GHC.Show.Show ParsePatterns.Expr


-- | This is an internal relapse module.
--   
--   It zips patterns to reduce the state space.
module Zip
type Zipper = [Int]
zippy :: [Pattern] -> ([Pattern], Zipper)
unzipby :: Zipper -> [Bool] -> [Bool]


-- | This module simplifies Relapse patterns.
module Simplify

-- | simplify simplifies an input pattern to an equivalent simpler pattern.
simplify :: Refs -> Pattern -> Pattern


-- | This is an internal relapse module.
--   
--   It contains multiple implementations of if expressions.
module IfExprs
data IfExprs
type IfExpr = (BoolExpr, Pattern, Pattern)
evalIfExprs :: IfExprs -> Label -> Except ValueErr [Pattern]
compileIfExprs :: Refs -> [IfExpr] -> IfExprs
data ZippedIfExprs
zipIfExprs :: IfExprs -> ZippedIfExprs
evalZippedIfExprs :: ZippedIfExprs -> Label -> Except ValueErr ([Pattern], Zipper)


-- | This module is a simple implementation of the internal derivative
--   algorithm.
--   
--   It is intended to be used for explanation purposes.
--   
--   This means that it gives up speed for readability.
--   
--   Thus it has no type of memoization.
module Derive

-- | derive is the classic derivative implementation for trees.
derive :: Tree t => Refs -> [t] -> Except String Pattern

-- | calls returns a compiled if expression tree. Each if expression
--   returns a child pattern, given the input value. In other words calls
--   signature is actually:
--   
--   <pre>
--   Refs -&gt; [Pattern] -&gt; Value -&gt; [Pattern]
--   </pre>
--   
--   , where the resulting list of patterns are the child patterns, that
--   need to be derived given the trees child values.
calls :: Refs -> [Pattern] -> IfExprs

-- | returns takes a list of patterns and list of bools. The list of bools
--   represent the nullability of the derived child patterns. Each bool
--   will then replace each Node pattern with either an Empty or EmptySet.
--   The lists do not to be the same length, because each Pattern can
--   contain an arbitrary number of Node Patterns.
returns :: Refs -> ([Pattern], [Bool]) -> [Pattern]

-- | zipderive is a slighty optimized version of derivs. It zips its
--   intermediate pattern lists to reduce the state space.
zipderive :: Tree t => Refs -> [t] -> Except String Pattern

module MemDerive
derive :: Tree t => Refs -> [t] -> Except String Pattern
type Mem = (Nullable, Calls, Returns)
newMem :: Mem
nullable :: Refs -> Pattern -> State Mem Bool


-- | This module contains a VPA (Visual Pushdown Automaton) implementation
--   of the internal derivative algorithm.
--   
--   It is intended to be used for explanation purposes.
--   
--   It shows how out algorithm is effective equivalent to a visual
--   pushdown automaton.
module VpaDerive
derive :: Tree t => Refs -> [t] -> Except String Pattern


-- | This module parses the Relapse Grammar using the Parsec Library.
module Parser

-- | parseGrammar parses the Relapse Grammar.
parseGrammar :: String -> Either ParseError Refs
grammar :: CharParser () Refs
pattern :: CharParser () Pattern
nameExpr :: CharParser () BoolExpr
expr :: CharParser () BoolExpr
idLit :: CharParser () String
bytesCastLit :: CharParser () String
stringLit :: CharParser () String
doubleCastLit :: CharParser () Double
uintCastLit :: CharParser () Int
intLit :: CharParser () Int
ws :: CharParser () ()
